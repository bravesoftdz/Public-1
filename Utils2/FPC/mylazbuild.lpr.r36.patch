Index: mylazbuild.lpr
===================================================================
--- mylazbuild.lpr	(Revision 36)
+++ mylazbuild.lpr	(Arbeitskopie)
@@ -16,10 +16,10 @@
  *   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.        *
  *                                                                         *
  ***************************************************************************
- 
+
   Command line utility to compile lazarus projects and packages.
 }
-//Change: JC99  
+//Change: JC99
 program mylazbuild;
 //End
 
@@ -46,35 +46,41 @@
   IDECmdLine, MiscOptions, Project, LazConf, PackageDefs,
   PackageLinks, PackageSystem, InterPkgConflictFiles, BuildLazDialog,
   BuildProfileManager, BuildManager, BaseBuildManager, ModeMatrixOpts;
-  
+
 type
+  TPkgAction = (
+    lpaBuild, // build package, default
+    lpaInstall, // install package
+    lpaAddPkgLinks // register, no build
+    );
 
   { TLazBuildApplication }
 
   TLazBuildApplication = class(TCustomApplication)
   private
-    FAddPackage: boolean;
     FBuildAll: boolean;
     FBuildIDE: boolean;
     FBuildIDEOptions: string;
     FBuildModeOverride: String;
     FBuildRecursive: boolean;
+    fCompilerInCfg: string;
     fCompilerOverride: String;
-    fCompilerInCfg: string;
+    fCPUOverride: String;
     FCreateMakefile: boolean;
+    fInitialized: boolean;
+    fInitResult: boolean;
+    fLazarusDirInCfg: string;
     fLazarusDirOverride : String;
-    fLazarusDirInCfg: string;
-    fCPUOverride: String;
     FMaxProcessCount: integer;
+    FNoWriteProject: Boolean;
     fOSOverride: String;
+    FPackageAction: TPkgAction;
     FPkgGraphVerbosity: TPkgVerbosityFlags;
-//Change: JC99  
+//Change: JC99
     FOutputOverride: String;
     FUnitOutputOverride: String;
 //End
     FSkipDependencies: boolean;
-    fInitialized: boolean;
-    fInitResult: boolean;
     fWidgetsetOverride: String;
 
     // codetools
@@ -103,7 +109,7 @@
     function OnIDEQuestionDialog(const aCaption, aMsg: string;
                                  {%H-}DlgType: TMsgDlgType; {%H-}Buttons: array of const;
                                  const {%H-}HelpKeyword: string): Integer;
-//Change: JC99 
+//Change: JC99
     procedure SetOutputOverride(AValue: String);
     procedure SetUnitOutputOverride(AValue: String);
 //End
@@ -133,6 +139,7 @@
     // Adding packages to list of to-be-installed packages in the IDE.
     // The packages can then be installed by recompiling the IDE (because we're using static packages)
     function AddPackagesToInstallList(const PackageNamesOrFiles: TStringList): boolean;
+    function AddCmdLinePackageLinks(const PackageNamesOrFiles: TStringList): boolean;
 
     // IDE
     function BuildLazarusIDE: boolean;
@@ -159,7 +166,7 @@
     procedure WriteUsage;
     procedure Error(ErrorCode: Byte; const ErrorMsg: string);
 
-    property AddPackage: boolean read FAddPackage write FAddPackage; // add package to installed pacakge in IDE (UserIDE)
+    property PackageAction: TPkgAction read FPackageAction write FPackageAction;
     property BuildAll: boolean read FBuildAll write FBuildAll;// build all files of project/package
     property BuildRecursive: boolean read FBuildRecursive // apply BuildAll flag to dependencies
                                      write FBuildRecursive;
@@ -172,7 +179,7 @@
                                             write fWidgetsetOverride;
     property OSOverride: String read fOSOverride write fOSOverride;
     property CPUOverride: String read fCPUOverride write fCPUOverride;
-//Change: JC99 
+//Change: JC99
     property OutputOverride: String read FOutputOverride write SetOutputOverride;
     property UnitOutputOverride: String read FUnitOutputOverride write SetUnitOutputOverride;
 //End
@@ -180,6 +187,7 @@
     property LazarusDirOverride: String read fLazarusDirOverride write fLazarusDirOverride;
     property BuildModeOverride: String read FBuildModeOverride write FBuildModeOverride;
     property MaxProcessCount: integer read FMaxProcessCount write FMaxProcessCount;
+    property NoWriteProject: boolean read FNoWriteProject write FNoWriteProject;
     property PkgGraphVerbosity: TPkgVerbosityFlags read FPkgGraphVerbosity write FPkgGraphVerbosity;
   end;
 
@@ -357,7 +365,7 @@
   Result:=mrCancel;
 end;
 
-//Change: JC99 
+//Change: JC99
 procedure TLazBuildApplication.SetOutputOverride(AValue: String);
 begin
   if FOutputOverride=AValue then Exit;
@@ -393,6 +401,11 @@
   begin
     // Check for packages if the specified name is a valid identifier
     if IsValidIdent(OriginalFileName) then begin
+      if PackageAction=lpaAddPkgLinks then begin
+        Error(ErrorFileNotFound,'lpk file expected, but '+OriginalFilename+' found');
+        Exit;
+      end;
+
       // Initialize package graph with base packages etc:
       if not Init then exit;
       // Apparently not found, could be a known but not installed package
@@ -404,12 +417,10 @@
       end
       else begin
         // We found a package link
-        if AddPackage then begin
-          // this is handled in AddPackagesToInstallList
-          Result:=true;
-        end
-        else
-          Result:=BuildPackage(Package.LPKFilename)
+        case PackageAction of
+        lpaBuild: Result:=BuildPackage(Package.LPKFilename);
+        lpaInstall: Result:=true; // this is handled in AddPackagesToInstallList
+        end;
       end;
     end
     else begin
@@ -420,14 +431,13 @@
   end
   else begin
     // File exists:
-    if CompareFileExt(Filename,'.lpk')=0 then
-      if AddPackage then begin
-        // this is handled in AddPackagesToInstallList
-        Result:=true;
-      end
-      else
-        Result:=BuildPackage(Filename)
-    else if CompareFileExt(Filename,'.lpi')=0 then
+    if CompareFileExt(Filename,'.lpk')=0 then begin
+      case PackageAction of
+      lpaBuild: Result:=BuildPackage(Filename);
+      lpaInstall: Result:=true; // this is handled in AddPackagesToInstallList
+      lpaAddPkgLinks: Result:=true;
+      end;
+    end else if CompareFileExt(Filename,'.lpi')=0 then
       Result:=BuildProject(Filename)
     else if CompareFileExt(Filename,'.lpr')=0 then begin
       Filename:=ChangeFileExt(Filename,'.lpi');
@@ -446,7 +456,7 @@
   Flags: TPkgCompileFlags;
 begin
   Result:=false;
-  
+
   if not Init then exit;
 
   if ConsoleVerbosity>=0 then
@@ -455,7 +465,7 @@
   APackage:=LoadPackage(AFilename);
   if APackage=nil then
     Error(ErrorLoadPackageFailed, 'unable to load package "'+AFilename+'"');
-    
+
   Flags:=[];
   if BuildAll then
     Include(Flags,pcfCleanCompile)
@@ -471,7 +481,7 @@
   if (Length(CPUOverride) <> 0) then
     APackage.CompilerOptions.TargetCPU:=CPUOverride;
 
-//Change: JC99 
+//Change: JC99
   if (Length(OutputOverride) <> 0) then
     APackage.CompilerOptions.TargetFilename:=OutputOverride;
   if (Length(UnitOutputOverride) <> 0) then
@@ -725,7 +735,7 @@
 
 procedure TLazBuildApplication.CheckPackageGraphForCompilation(
   APackage: TLazPackage; FirstDependency: TPkgDependency);
-  
+
   function PathListToString(PathList: TFPList): string;
   var
     i: Integer;
@@ -748,7 +758,7 @@
       end;
     end;
   end;
-  
+
 var
   PathList: TFPList;
 begin
@@ -787,6 +797,7 @@
   MatrixOption: TBuildMatrixOption;
   ModeMask: TMask;
   CurResult: Boolean;
+  CompReason: TCompileReason;
 
   function StartBuilding : boolean;
   begin
@@ -830,7 +841,7 @@
     WorkingDir:=Project1.ProjectDirectory;
     SrcFilename:=CreateRelativePath(Project1.MainUnitInfo.Filename,WorkingDir);
 
-//Change: JC99 
+//Change: JC99
     // override unit output directory
     if (Length(OutputOverride) <> 0) then
       Project1.CompilerOptions.TargetFilename:=OutputOverride;
@@ -947,7 +958,7 @@
   if not Init then exit;
 
   Project1:=LoadProject(AFilename);
-  
+
   if Project1.MainUnitInfo=nil then
     Error(ErrorBuildFailed,'project has no main unit');
 
@@ -999,16 +1010,23 @@
   else
     Result := StartBuilding;
 
+  if BuildAll then
+    CompReason:=crBuild
+  else
+    CompReason:=crCompile;
+
   // Auto increment build number
-  if Result then
+  if Result and not NoWriteProject then
   begin
-    with Project1.ProjResources.VersionInfo do
+    if FileIsWritable(AFilename) then
     begin
-      if UseVersionInfo and AutoIncrementBuild then
-      begin
-        BuildNr := BuildNr + 1;
-        Project1.WriteProject(Project1.PublishOptions.WriteFlags,AFileName,EnvironmentOptions.BuildMatrixOptions);
-      end;
+      Project1.ProjResources.DoAfterBuild(CompReason, Project1.IsVirtual);
+      Project1.WriteProject(Project1.PublishOptions.WriteFlags,AFileName,EnvironmentOptions.BuildMatrixOptions)
+    end
+    else
+    begin
+      if ConsoleVerbosity>=-1 then
+        DebugLn('Error: (lazarus) Project1.WriteProject skipped for read-only ',SrcFilename);
     end;
   end;
 end;
@@ -1085,7 +1103,7 @@
     PackageName:='';
     PkgFilename:='';
     if CompareFileExt(PackageNamesOrFiles[i],'.lpk')=0 then
-      PkgFilename:=PackageNamesOrFiles[i]
+      PkgFilename:=ExpandFileName(PackageNamesOrFiles[i])
     else if IsValidIdent(PackageNamesOrFiles[i]) then begin
       PackageLink:=PkgLinks.FindLinkWithPkgName(PackageNamesOrFiles[i]);
       if PackageLink=nil then
@@ -1129,6 +1147,48 @@
   Result:=true;
 end;
 
+function TLazBuildApplication.AddCmdLinePackageLinks(
+  const PackageNamesOrFiles: TStringList): boolean;
+var
+  ErrorMsg, PkgFilename: String;
+  i, ErrCode: Integer;
+  Package: TLazPackage;
+begin
+  Result:=false;
+  if not Init then exit;
+
+  ErrorMsg:='';
+  ErrCode:=ErrorLoadPackageFailed;
+  for i:=0 to PackageNamesOrFiles.Count -1 do
+  begin
+    // Look for package name in all known packages
+    PkgFilename:=PackageNamesOrFiles[i];
+    if CompareFileExt(PkgFilename,'.lpk')<>0 then begin
+      ErrorMsg+=PkgFilename+' is not a package, so it is not registered.'+LineEnding;
+      continue;
+    end;
+    PkgFilename:=ExpandFileNameUTF8(PkgFilename);
+
+    Package:=LoadPackage(PkgFilename);
+    if Package=nil then
+    begin
+      ErrorMsg+='Could not load '+PkgFilename+', so it is not registered.'+LineEnding;
+      continue;
+    end;
+    if ConsoleVerbosity>=0 then
+      debugln(['Hint: (lazarus) registering package link "'+PkgFilename+'".']);
+    PkgLinks.AddUserLink(Package);
+  end;
+  if ErrorMsg<>'' then begin
+    ErrorMsg:=UTF8Trim(ErrorMsg);
+    Error(ErrCode,ErrorMsg);
+    exit;
+  end;
+
+  PkgLinks.SaveUserLinks(true);
+  Result:=true;
+end;
+
 function TLazBuildApplication.Init: boolean;
 begin
   if fInitialized then exit(fInitResult);
@@ -1464,13 +1524,21 @@
   end;
 
   // Add user-requested packages to IDE install list:
-  if AddPackage then begin
+  case PackageAction of
+  lpaInstall:
     if not AddPackagesToInstallList(Files) then begin
       if ConsoleVerbosity>=-1 then
-        debugln('Error (lazarus) Adding package(s) failed: ',Files.Text);
+        debugln('Error: (lazarus) Installing package(s) failed: ',Files.Text);
       ExitCode := ErrorBuildFailed;
       exit;
     end;
+  lpaAddPkgLinks:
+    if not AddCmdLinePackageLinks(Files) then begin
+      if ConsoleVerbosity>=-1 then
+        debugln('Error: (lazarus) Adding package(s) links failed: ',Files.Text);
+      ExitCode := ErrorBuildFailed;
+      exit;
+    end;
   end;
 
   if BuildIDE then begin
@@ -1489,6 +1557,7 @@
   LongOptions: TStringList;
   i: Integer;
   p: String;
+  FilesNeeded: Boolean;
 begin
   Result:=false;
   if (ToolParamCount<=0)
@@ -1532,6 +1601,7 @@
     LongOptions.Add('scp:');
     LongOptions.Add('language:');
     LongOptions.Add('add-package');
+    LongOptions.Add('add-package-link');
     LongOptions.Add('build-all');
     LongOptions.Add('build-ide:');
     LongOptions.Add('recursive');
@@ -1543,7 +1613,7 @@
     LongOptions.Add('cpu:');
     LongOptions.Add('bm:');
     LongOptions.Add('build-mode:');
-//Change: JC99 
+//Change: JC99
     LongOptions.Add('output:');
     LongOptions.Add('FU:');
     LongOptions.Add('unit-output:');
@@ -1552,7 +1622,8 @@
     LongOptions.Add('lazarusdir:');
     LongOptions.Add('create-makefile');
     LongOptions.Add('max-process-count:');
-//Change: JC99 
+    LongOptions.Add('no-write-project');
+//Change: JC99
     ErrorMsg:=RepairedCheckOptions('lBrdqo',LongOptions,Options,NonOptions);
 //End
     if ErrorMsg<>'' then begin
@@ -1561,13 +1632,42 @@
       exit;
     end;
 
+    FilesNeeded:=true;
+
     if HasOption('verbose-pkgsearch') then
       Include(fPkgGraphVerbosity,pvPkgSearch);
 
+    // PackageAction: register lpk files
+    if HasOption('add-package-link') then begin
+      if ConsoleVerbosity>=0 then
+        writeln('Parameter: add-package-link');
+      if PackageAction<>lpaBuild then begin
+        writeln('Error: invalid combination of package actions');
+        WriteUsage;
+        exit;
+      end;
+      FilesNeeded:=false;
+      PackageAction:=lpaAddPkgLinks;
+    end;
+
+    // PackageAction: install lpk files
+    if HasOption('add-package') then begin
+      if ConsoleVerbosity>=0 then
+        writeln('Parameter: add-package');
+      if PackageAction<>lpaBuild then begin
+        writeln('Error: invalid combination of package actions');
+        WriteUsage;
+        exit;
+      end;
+      PackageAction:=lpaInstall;
+      FilesNeeded:=false;
+    end;
+
     // building IDE
     if HasOption('build-ide') then begin
       BuildIDE:=true;
       BuildIDEOptions:=GetOptionValue('build-ide');
+      FilesNeeded:=false;
       if ConsoleVerbosity>=0 then
         writeln('Parameter: build-ide=',BuildIDEOptions);
     end;
@@ -1574,19 +1674,12 @@
 
     // files
     Files.Assign(NonOptions);
-    if (Files.Count=0) and (not BuildIDE) then begin
+    if FilesNeeded and (Files.Count=0) then begin
       writeln('Error: missing file');
       WriteUsage;
       exit;
     end;
 
-    // Add package to list of to be installed packages
-    if HasOption('add-package') then begin
-      AddPackage:=true;
-      if ConsoleVerbosity>=0 then
-        writeln('Parameter: add-package');
-    end;
-
     // primary config path
     if HasOption('primary-config-path') then begin
       SetPrimaryConfigPath(GetOptionValue('primary-config-path'));
@@ -1706,12 +1799,19 @@
         writeln('Parameter: max-process-count=',MaxProcessCount);
     end;
 
+    if HasOption('no-write-project') then
+    begin
+      NoWriteProject := true;
+      if ConsoleVerbosity>=0 then
+        writeln('Parameter: no-write-project');
+    end;
+
     if HasOption('create-makefile') then
     begin
       CreateMakefile := true;
       if ConsoleVerbosity>=0 then
         writeln('Parameter: create-makefile');
-      if AddPackage then
+      if PackageAction<>lpaBuild then
         Error(ErrorPackageNameInvalid,'You can not combine --create-makefile and --add-package');
     end;
   finally
@@ -1766,6 +1866,8 @@
 
   writeln('--add-package');
   w(space+lisAddPackageSToListOfInstalledPackagesCombineWithBui);
+  writeln('--add-package-link=<.lpk file>');
+  w(space+lisOnlyRegisterTheLazarusPackageFilesLpkDoNotBuild);
   writeln('--create-makefile');
   w(space+lisInsteadOfCompilePackageCreateASimpleMakefile);
   writeln('');
@@ -1822,11 +1924,14 @@
   writeln('--max-process-count=<count>');
   w(space+lisMaximumNumberOfThreadsForCompilingInParallelDefaul);
   writeln('');
+  writeln('--no-write-project');
+  w(space+lisDoNotWriteUpdatedProjectInfoAfterBuild);
+  writeln('');
 end;
 
 procedure TLazBuildApplication.Error(ErrorCode: Byte; const ErrorMsg: string);
 begin
-  writeln('ERROR: ',LineBreaksToSystemLineBreaks(ErrorMsg));
+  writeln('Error: (lazbuild) ',LineBreaksToSystemLineBreaks(ErrorMsg));
   Halt(ErrorCode);
 end;
 
